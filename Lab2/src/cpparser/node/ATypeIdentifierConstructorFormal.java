/* This file was generated by SableCC (http://www.sablecc.org/). */

package cpparser.node;

import cpparser.analysis.*;

@SuppressWarnings("nls")
public final class ATypeIdentifierConstructorFormal extends PFormal
{
    private PType _type_;
    private TIdentifier _identifier_;
    private TLeftSbrace _leftSbrace_;
    private TRightSbrace _rightSbrace_;

    public ATypeIdentifierConstructorFormal()
    {
        // Constructor
    }

    public ATypeIdentifierConstructorFormal(
        @SuppressWarnings("hiding") PType _type_,
        @SuppressWarnings("hiding") TIdentifier _identifier_,
        @SuppressWarnings("hiding") TLeftSbrace _leftSbrace_,
        @SuppressWarnings("hiding") TRightSbrace _rightSbrace_)
    {
        // Constructor
        setType(_type_);

        setIdentifier(_identifier_);

        setLeftSbrace(_leftSbrace_);

        setRightSbrace(_rightSbrace_);

    }

    @Override
    public Object clone()
    {
        return new ATypeIdentifierConstructorFormal(
            cloneNode(this._type_),
            cloneNode(this._identifier_),
            cloneNode(this._leftSbrace_),
            cloneNode(this._rightSbrace_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseATypeIdentifierConstructorFormal(this);
    }

    public PType getType()
    {
        return this._type_;
    }

    public void setType(PType node)
    {
        if(this._type_ != null)
        {
            this._type_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._type_ = node;
    }

    public TIdentifier getIdentifier()
    {
        return this._identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(this._identifier_ != null)
        {
            this._identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifier_ = node;
    }

    public TLeftSbrace getLeftSbrace()
    {
        return this._leftSbrace_;
    }

    public void setLeftSbrace(TLeftSbrace node)
    {
        if(this._leftSbrace_ != null)
        {
            this._leftSbrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._leftSbrace_ = node;
    }

    public TRightSbrace getRightSbrace()
    {
        return this._rightSbrace_;
    }

    public void setRightSbrace(TRightSbrace node)
    {
        if(this._rightSbrace_ != null)
        {
            this._rightSbrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rightSbrace_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._type_)
            + toString(this._identifier_)
            + toString(this._leftSbrace_)
            + toString(this._rightSbrace_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._type_ == child)
        {
            this._type_ = null;
            return;
        }

        if(this._identifier_ == child)
        {
            this._identifier_ = null;
            return;
        }

        if(this._leftSbrace_ == child)
        {
            this._leftSbrace_ = null;
            return;
        }

        if(this._rightSbrace_ == child)
        {
            this._rightSbrace_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._type_ == oldChild)
        {
            setType((PType) newChild);
            return;
        }

        if(this._identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        if(this._leftSbrace_ == oldChild)
        {
            setLeftSbrace((TLeftSbrace) newChild);
            return;
        }

        if(this._rightSbrace_ == oldChild)
        {
            setRightSbrace((TRightSbrace) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
