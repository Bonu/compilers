/* This file was generated by SableCC (http://www.sablecc.org/). */

package cpparser.node;

import cpparser.analysis.*;

@SuppressWarnings("nls")
public final class AArrayRefIddotidArrayRef extends PArrayRef
{
    private TIdentifier _left_;
    private TDot _dot_;
    private TIdentifier _right_;
    private TLeftSbrace _leftSbrace_;
    private PExpr _expr_;
    private TRightSbrace _rightSbrace_;

    public AArrayRefIddotidArrayRef()
    {
        // Constructor
    }

    public AArrayRefIddotidArrayRef(
        @SuppressWarnings("hiding") TIdentifier _left_,
        @SuppressWarnings("hiding") TDot _dot_,
        @SuppressWarnings("hiding") TIdentifier _right_,
        @SuppressWarnings("hiding") TLeftSbrace _leftSbrace_,
        @SuppressWarnings("hiding") PExpr _expr_,
        @SuppressWarnings("hiding") TRightSbrace _rightSbrace_)
    {
        // Constructor
        setLeft(_left_);

        setDot(_dot_);

        setRight(_right_);

        setLeftSbrace(_leftSbrace_);

        setExpr(_expr_);

        setRightSbrace(_rightSbrace_);

    }

    @Override
    public Object clone()
    {
        return new AArrayRefIddotidArrayRef(
            cloneNode(this._left_),
            cloneNode(this._dot_),
            cloneNode(this._right_),
            cloneNode(this._leftSbrace_),
            cloneNode(this._expr_),
            cloneNode(this._rightSbrace_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAArrayRefIddotidArrayRef(this);
    }

    public TIdentifier getLeft()
    {
        return this._left_;
    }

    public void setLeft(TIdentifier node)
    {
        if(this._left_ != null)
        {
            this._left_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._left_ = node;
    }

    public TDot getDot()
    {
        return this._dot_;
    }

    public void setDot(TDot node)
    {
        if(this._dot_ != null)
        {
            this._dot_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._dot_ = node;
    }

    public TIdentifier getRight()
    {
        return this._right_;
    }

    public void setRight(TIdentifier node)
    {
        if(this._right_ != null)
        {
            this._right_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._right_ = node;
    }

    public TLeftSbrace getLeftSbrace()
    {
        return this._leftSbrace_;
    }

    public void setLeftSbrace(TLeftSbrace node)
    {
        if(this._leftSbrace_ != null)
        {
            this._leftSbrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._leftSbrace_ = node;
    }

    public PExpr getExpr()
    {
        return this._expr_;
    }

    public void setExpr(PExpr node)
    {
        if(this._expr_ != null)
        {
            this._expr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expr_ = node;
    }

    public TRightSbrace getRightSbrace()
    {
        return this._rightSbrace_;
    }

    public void setRightSbrace(TRightSbrace node)
    {
        if(this._rightSbrace_ != null)
        {
            this._rightSbrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rightSbrace_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._left_)
            + toString(this._dot_)
            + toString(this._right_)
            + toString(this._leftSbrace_)
            + toString(this._expr_)
            + toString(this._rightSbrace_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._left_ == child)
        {
            this._left_ = null;
            return;
        }

        if(this._dot_ == child)
        {
            this._dot_ = null;
            return;
        }

        if(this._right_ == child)
        {
            this._right_ = null;
            return;
        }

        if(this._leftSbrace_ == child)
        {
            this._leftSbrace_ = null;
            return;
        }

        if(this._expr_ == child)
        {
            this._expr_ = null;
            return;
        }

        if(this._rightSbrace_ == child)
        {
            this._rightSbrace_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._left_ == oldChild)
        {
            setLeft((TIdentifier) newChild);
            return;
        }

        if(this._dot_ == oldChild)
        {
            setDot((TDot) newChild);
            return;
        }

        if(this._right_ == oldChild)
        {
            setRight((TIdentifier) newChild);
            return;
        }

        if(this._leftSbrace_ == oldChild)
        {
            setLeftSbrace((TLeftSbrace) newChild);
            return;
        }

        if(this._expr_ == oldChild)
        {
            setExpr((PExpr) newChild);
            return;
        }

        if(this._rightSbrace_ == oldChild)
        {
            setRightSbrace((TRightSbrace) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
