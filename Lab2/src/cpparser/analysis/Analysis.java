/* This file was generated by SableCC (http://www.sablecc.org/). */

package cpparser.analysis;

import cpparser.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseTWhiteSpace(TWhiteSpace node);
    void caseTSlcomment(TSlcomment node);
    void caseTMlcomment(TMlcomment node);
    void caseTDoccomment(TDoccomment node);
    void caseTKsemicolon(TKsemicolon node);
    void caseTIdentifier(TIdentifier node);
    void caseTFloatLit(TFloatLit node);
    void caseTInteger(TInteger node);
    void caseTCharacter(TCharacter node);
    void caseTStringLiteral(TStringLiteral node);
    void caseTComma(TComma node);
    void caseTDot(TDot node);
    void caseTAssign(TAssign node);
    void caseTLt(TLt node);
    void caseTGt(TGt node);
    void caseTComplement(TComplement node);
    void caseTBitComplement(TBitComplement node);
    void caseTQuestion(TQuestion node);
    void caseTColon(TColon node);
    void caseTHash(THash node);
    void caseTEq(TEq node);
    void caseTLteq(TLteq node);
    void caseTGteq(TGteq node);
    void caseTNeq(TNeq node);
    void caseTAnd(TAnd node);
    void caseTOr(TOr node);
    void caseTPlusPlus(TPlusPlus node);
    void caseTMinusMinus(TMinusMinus node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTStar(TStar node);
    void caseTDiv(TDiv node);
    void caseTBitAnd(TBitAnd node);
    void caseTBitOr(TBitOr node);
    void caseTBitXor(TBitXor node);
    void caseTMod(TMod node);
    void caseTLeftFbrace(TLeftFbrace node);
    void caseTRightFbrace(TRightFbrace node);
    void caseTSemicolon(TSemicolon node);
    void caseTLeftSbrace(TLeftSbrace node);
    void caseTRightSbrace(TRightSbrace node);
    void caseTArrow(TArrow node);
    void caseTLeftBrace(TLeftBrace node);
    void caseTRightBrace(TRightBrace node);
    void caseTDquote(TDquote node);
    void caseTShiftLeft(TShiftLeft node);
    void caseTSignedShiftRight(TSignedShiftRight node);
    void caseTUnsignedShiftRight(TUnsignedShiftRight node);
    void caseTPlusAssign(TPlusAssign node);
    void caseTMinusAssign(TMinusAssign node);
    void caseTStarAssign(TStarAssign node);
    void caseTDivAssign(TDivAssign node);
    void caseTBitAndAssign(TBitAndAssign node);
    void caseTBitOrAssign(TBitOrAssign node);
    void caseTBitXorAssign(TBitXorAssign node);
    void caseTModAssign(TModAssign node);
    void caseTShiftLeftAssign(TShiftLeftAssign node);
    void caseTSignedShiftRightAssign(TSignedShiftRightAssign node);
    void caseTUnsignedShiftRightAssign(TUnsignedShiftRightAssign node);
    void caseTBool(TBool node);
    void caseTBreak(TBreak node);
    void caseTChar(TChar node);
    void caseTKconst(TKconst node);
    void caseTContinue(TContinue node);
    void caseTDo(TDo node);
    void caseTElse(TElse node);
    void caseTFalse(TFalse node);
    void caseTFloat(TFloat node);
    void caseTIf(TIf node);
    void caseTInt(TInt node);
    void caseTKClass(TKClass node);
    void caseTNew(TNew node);
    void caseTNull(TNull node);
    void caseTPrivate(TPrivate node);
    void caseTProtected(TProtected node);
    void caseTPublic(TPublic node);
    void caseTReturn(TReturn node);
    void caseTStatic(TStatic node);
    void caseTString(TString node);
    void caseTStruct(TStruct node);
    void caseTThis(TThis node);
    void caseTTrue(TTrue node);
    void caseTWhile(TWhile node);
    void caseTVoid(TVoid node);
    void caseEOF(EOF node);
}
