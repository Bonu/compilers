/* This file was generated by SableCC (http://www.sablecc.org/). */

package cpparser.analysis;

import java.util.*;
import cpparser.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPProgram().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAClassDeclsProgram(AClassDeclsProgram node)
    {
        defaultIn(node);
    }

    public void outAClassDeclsProgram(AClassDeclsProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassDeclsProgram(AClassDeclsProgram node)
    {
        inAClassDeclsProgram(node);
        if(node.getClassDecls() != null)
        {
            node.getClassDecls().apply(this);
        }
        outAClassDeclsProgram(node);
    }

    public void inAClassDeclsMultipleClassDecls(AClassDeclsMultipleClassDecls node)
    {
        defaultIn(node);
    }

    public void outAClassDeclsMultipleClassDecls(AClassDeclsMultipleClassDecls node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassDeclsMultipleClassDecls(AClassDeclsMultipleClassDecls node)
    {
        inAClassDeclsMultipleClassDecls(node);
        if(node.getClassDecls() != null)
        {
            node.getClassDecls().apply(this);
        }
        if(node.getClassDecl() != null)
        {
            node.getClassDecl().apply(this);
        }
        outAClassDeclsMultipleClassDecls(node);
    }

    public void inAClassDeclareSingleClassDecls(AClassDeclareSingleClassDecls node)
    {
        defaultIn(node);
    }

    public void outAClassDeclareSingleClassDecls(AClassDeclareSingleClassDecls node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassDeclareSingleClassDecls(AClassDeclareSingleClassDecls node)
    {
        inAClassDeclareSingleClassDecls(node);
        if(node.getClassDecl() != null)
        {
            node.getClassDecl().apply(this);
        }
        outAClassDeclareSingleClassDecls(node);
    }

    public void inAClassHdrLeftClassDecl(AClassHdrLeftClassDecl node)
    {
        defaultIn(node);
    }

    public void outAClassHdrLeftClassDecl(AClassHdrLeftClassDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassHdrLeftClassDecl(AClassHdrLeftClassDecl node)
    {
        inAClassHdrLeftClassDecl(node);
        if(node.getClassHdr() != null)
        {
            node.getClassHdr().apply(this);
        }
        if(node.getLeftFbrace() != null)
        {
            node.getLeftFbrace().apply(this);
        }
        if(node.getRightFbrace() != null)
        {
            node.getRightFbrace().apply(this);
        }
        outAClassHdrLeftClassDecl(node);
    }

    public void inAClassHdrRightClassDecl(AClassHdrRightClassDecl node)
    {
        defaultIn(node);
    }

    public void outAClassHdrRightClassDecl(AClassHdrRightClassDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassHdrRightClassDecl(AClassHdrRightClassDecl node)
    {
        inAClassHdrRightClassDecl(node);
        if(node.getLeftFbrace() != null)
        {
            node.getLeftFbrace().apply(this);
        }
        if(node.getClassMemberDecls() != null)
        {
            node.getClassMemberDecls().apply(this);
        }
        if(node.getRightFbrace() != null)
        {
            node.getRightFbrace().apply(this);
        }
        outAClassHdrRightClassDecl(node);
    }

    public void inATClassClassHdr(ATClassClassHdr node)
    {
        defaultIn(node);
    }

    public void outATClassClassHdr(ATClassClassHdr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATClassClassHdr(ATClassClassHdr node)
    {
        inATClassClassHdr(node);
        if(node.getKClass() != null)
        {
            node.getKClass().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outATClassClassHdr(node);
    }

    public void inAClassMemberDeclsClassMemberDecls(AClassMemberDeclsClassMemberDecls node)
    {
        defaultIn(node);
    }

    public void outAClassMemberDeclsClassMemberDecls(AClassMemberDeclsClassMemberDecls node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassMemberDeclsClassMemberDecls(AClassMemberDeclsClassMemberDecls node)
    {
        inAClassMemberDeclsClassMemberDecls(node);
        if(node.getClassMemberDecls() != null)
        {
            node.getClassMemberDecls().apply(this);
        }
        if(node.getClassMember() != null)
        {
            node.getClassMember().apply(this);
        }
        outAClassMemberDeclsClassMemberDecls(node);
    }

    public void inAClassMemberSingleClassMemberDecls(AClassMemberSingleClassMemberDecls node)
    {
        defaultIn(node);
    }

    public void outAClassMemberSingleClassMemberDecls(AClassMemberSingleClassMemberDecls node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassMemberSingleClassMemberDecls(AClassMemberSingleClassMemberDecls node)
    {
        inAClassMemberSingleClassMemberDecls(node);
        if(node.getClassMember() != null)
        {
            node.getClassMember().apply(this);
        }
        outAClassMemberSingleClassMemberDecls(node);
    }

    public void inAFieldClassMember(AFieldClassMember node)
    {
        defaultIn(node);
    }

    public void outAFieldClassMember(AFieldClassMember node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFieldClassMember(AFieldClassMember node)
    {
        inAFieldClassMember(node);
        if(node.getField() != null)
        {
            node.getField().apply(this);
        }
        outAFieldClassMember(node);
    }

    public void inAMethodClassMember(AMethodClassMember node)
    {
        defaultIn(node);
    }

    public void outAMethodClassMember(AMethodClassMember node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodClassMember(AMethodClassMember node)
    {
        inAMethodClassMember(node);
        if(node.getMethodDecl() != null)
        {
            node.getMethodDecl().apply(this);
        }
        outAMethodClassMember(node);
    }

    public void inASemicolonClassMember(ASemicolonClassMember node)
    {
        defaultIn(node);
    }

    public void outASemicolonClassMember(ASemicolonClassMember node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASemicolonClassMember(ASemicolonClassMember node)
    {
        inASemicolonClassMember(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outASemicolonClassMember(node);
    }

    public void inAType1Field(AType1Field node)
    {
        defaultIn(node);
    }

    public void outAType1Field(AType1Field node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAType1Field(AType1Field node)
    {
        inAType1Field(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getOne() != null)
        {
            node.getOne().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAType1Field(node);
    }

    public void inAType2Field(AType2Field node)
    {
        defaultIn(node);
    }

    public void outAType2Field(AType2Field node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAType2Field(AType2Field node)
    {
        inAType2Field(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getTwo() != null)
        {
            node.getTwo().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAType2Field(node);
    }

    public void inAType3Field(AType3Field node)
    {
        defaultIn(node);
    }

    public void outAType3Field(AType3Field node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAType3Field(AType3Field node)
    {
        inAType3Field(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getThree() != null)
        {
            node.getThree().apply(this);
        }
        if(node.getLeftSbrace() != null)
        {
            node.getLeftSbrace().apply(this);
        }
        if(node.getIntegerLiteral() != null)
        {
            node.getIntegerLiteral().apply(this);
        }
        if(node.getRightSbrace() != null)
        {
            node.getRightSbrace().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAType3Field(node);
    }

    public void inAIntType(AIntType node)
    {
        defaultIn(node);
    }

    public void outAIntType(AIntType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntType(AIntType node)
    {
        inAIntType(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAIntType(node);
    }

    public void inACharType(ACharType node)
    {
        defaultIn(node);
    }

    public void outACharType(ACharType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACharType(ACharType node)
    {
        inACharType(node);
        if(node.getChar() != null)
        {
            node.getChar().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outACharType(node);
    }

    public void inABoolType(ABoolType node)
    {
        defaultIn(node);
    }

    public void outABoolType(ABoolType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolType(ABoolType node)
    {
        inABoolType(node);
        if(node.getBool() != null)
        {
            node.getBool().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outABoolType(node);
    }

    public void inAStringType(AStringType node)
    {
        defaultIn(node);
    }

    public void outAStringType(AStringType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringType(AStringType node)
    {
        inAStringType(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAStringType(node);
    }

    public void inAFloatType(AFloatType node)
    {
        defaultIn(node);
    }

    public void outAFloatType(AFloatType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFloatType(AFloatType node)
    {
        inAFloatType(node);
        if(node.getFloat() != null)
        {
            node.getFloat().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAFloatType(node);
    }

    public void inAMethodArgumentsMethodDecl(AMethodArgumentsMethodDecl node)
    {
        defaultIn(node);
    }

    public void outAMethodArgumentsMethodDecl(AMethodArgumentsMethodDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodArgumentsMethodDecl(AMethodArgumentsMethodDecl node)
    {
        inAMethodArgumentsMethodDecl(node);
        if(node.getMethodHdr() != null)
        {
            node.getMethodHdr().apply(this);
        }
        if(node.getLeftBrace() != null)
        {
            node.getLeftBrace().apply(this);
        }
        if(node.getFormals() != null)
        {
            node.getFormals().apply(this);
        }
        if(node.getRightBrace() != null)
        {
            node.getRightBrace().apply(this);
        }
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        outAMethodArgumentsMethodDecl(node);
    }

    public void inAMethodNoArgumentsMethodDecl(AMethodNoArgumentsMethodDecl node)
    {
        defaultIn(node);
    }

    public void outAMethodNoArgumentsMethodDecl(AMethodNoArgumentsMethodDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodNoArgumentsMethodDecl(AMethodNoArgumentsMethodDecl node)
    {
        inAMethodNoArgumentsMethodDecl(node);
        if(node.getMethodHdr() != null)
        {
            node.getMethodHdr().apply(this);
        }
        if(node.getLeftBrace() != null)
        {
            node.getLeftBrace().apply(this);
        }
        if(node.getRightBrace() != null)
        {
            node.getRightBrace().apply(this);
        }
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        outAMethodNoArgumentsMethodDecl(node);
    }

    public void inAVoidIdentifierMethodHdr(AVoidIdentifierMethodHdr node)
    {
        defaultIn(node);
    }

    public void outAVoidIdentifierMethodHdr(AVoidIdentifierMethodHdr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVoidIdentifierMethodHdr(AVoidIdentifierMethodHdr node)
    {
        inAVoidIdentifierMethodHdr(node);
        if(node.getVoid() != null)
        {
            node.getVoid().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAVoidIdentifierMethodHdr(node);
    }

    public void inATypeIdentifierMethodHdr(ATypeIdentifierMethodHdr node)
    {
        defaultIn(node);
    }

    public void outATypeIdentifierMethodHdr(ATypeIdentifierMethodHdr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeIdentifierMethodHdr(ATypeIdentifierMethodHdr node)
    {
        inATypeIdentifierMethodHdr(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outATypeIdentifierMethodHdr(node);
    }

    public void inAFormalFormals(AFormalFormals node)
    {
        defaultIn(node);
    }

    public void outAFormalFormals(AFormalFormals node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFormalFormals(AFormalFormals node)
    {
        inAFormalFormals(node);
        if(node.getFormal() != null)
        {
            node.getFormal().apply(this);
        }
        outAFormalFormals(node);
    }

    public void inAFormals(AFormals node)
    {
        defaultIn(node);
    }

    public void outAFormals(AFormals node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFormals(AFormals node)
    {
        inAFormals(node);
        if(node.getFormals() != null)
        {
            node.getFormals().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getFormal() != null)
        {
            node.getFormal().apply(this);
        }
        outAFormals(node);
    }

    public void inATypeIdentifierFormal(ATypeIdentifierFormal node)
    {
        defaultIn(node);
    }

    public void outATypeIdentifierFormal(ATypeIdentifierFormal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeIdentifierFormal(ATypeIdentifierFormal node)
    {
        inATypeIdentifierFormal(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outATypeIdentifierFormal(node);
    }

    public void inATypeIdentifierConstructorFormal(ATypeIdentifierConstructorFormal node)
    {
        defaultIn(node);
    }

    public void outATypeIdentifierConstructorFormal(ATypeIdentifierConstructorFormal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeIdentifierConstructorFormal(ATypeIdentifierConstructorFormal node)
    {
        inATypeIdentifierConstructorFormal(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLeftSbrace() != null)
        {
            node.getLeftSbrace().apply(this);
        }
        if(node.getRightSbrace() != null)
        {
            node.getRightSbrace().apply(this);
        }
        outATypeIdentifierConstructorFormal(node);
    }

    public void inAStmtsBlockBlock(AStmtsBlockBlock node)
    {
        defaultIn(node);
    }

    public void outAStmtsBlockBlock(AStmtsBlockBlock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStmtsBlockBlock(AStmtsBlockBlock node)
    {
        inAStmtsBlockBlock(node);
        if(node.getLeftFbrace() != null)
        {
            node.getLeftFbrace().apply(this);
        }
        if(node.getStmts() != null)
        {
            node.getStmts().apply(this);
        }
        if(node.getRightFbrace() != null)
        {
            node.getRightFbrace().apply(this);
        }
        outAStmtsBlockBlock(node);
    }

    public void inAEmptyBlockBlock(AEmptyBlockBlock node)
    {
        defaultIn(node);
    }

    public void outAEmptyBlockBlock(AEmptyBlockBlock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyBlockBlock(AEmptyBlockBlock node)
    {
        inAEmptyBlockBlock(node);
        if(node.getLeftFbrace() != null)
        {
            node.getLeftFbrace().apply(this);
        }
        if(node.getRightFbrace() != null)
        {
            node.getRightFbrace().apply(this);
        }
        outAEmptyBlockBlock(node);
    }

    public void inAManyStmtsStmts(AManyStmtsStmts node)
    {
        defaultIn(node);
    }

    public void outAManyStmtsStmts(AManyStmtsStmts node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAManyStmtsStmts(AManyStmtsStmts node)
    {
        inAManyStmtsStmts(node);
        if(node.getStmts() != null)
        {
            node.getStmts().apply(this);
        }
        if(node.getStmt() != null)
        {
            node.getStmt().apply(this);
        }
        outAManyStmtsStmts(node);
    }

    public void inASingleStmtStmts(ASingleStmtStmts node)
    {
        defaultIn(node);
    }

    public void outASingleStmtStmts(ASingleStmtStmts node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleStmtStmts(ASingleStmtStmts node)
    {
        inASingleStmtStmts(node);
        if(node.getStmt() != null)
        {
            node.getStmt().apply(this);
        }
        outASingleStmtStmts(node);
    }

    public void inASimpleStmtStmt(ASimpleStmtStmt node)
    {
        defaultIn(node);
    }

    public void outASimpleStmtStmt(ASimpleStmtStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleStmtStmt(ASimpleStmtStmt node)
    {
        inASimpleStmtStmt(node);
        if(node.getSimpleStmt() != null)
        {
            node.getSimpleStmt().apply(this);
        }
        outASimpleStmtStmt(node);
    }

    public void inAIfElseStmtStmt(AIfElseStmtStmt node)
    {
        defaultIn(node);
    }

    public void outAIfElseStmtStmt(AIfElseStmtStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfElseStmtStmt(AIfElseStmtStmt node)
    {
        inAIfElseStmtStmt(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAIfElseStmtStmt(node);
    }

    public void inACondition(ACondition node)
    {
        defaultIn(node);
    }

    public void outACondition(ACondition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACondition(ACondition node)
    {
        inACondition(node);
        if(node.getLeftBrace() != null)
        {
            node.getLeftBrace().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getRightBrace() != null)
        {
            node.getRightBrace().apply(this);
        }
        outACondition(node);
    }

    public void inAIdentifierLocalDecl(AIdentifierLocalDecl node)
    {
        defaultIn(node);
    }

    public void outAIdentifierLocalDecl(AIdentifierLocalDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierLocalDecl(AIdentifierLocalDecl node)
    {
        inAIdentifierLocalDecl(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAIdentifierLocalDecl(node);
    }

    public void inAIdentifierExprLocalDecl(AIdentifierExprLocalDecl node)
    {
        defaultIn(node);
    }

    public void outAIdentifierExprLocalDecl(AIdentifierExprLocalDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierExprLocalDecl(AIdentifierExprLocalDecl node)
    {
        inAIdentifierExprLocalDecl(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAIdentifierExprLocalDecl(node);
    }

    public void inAIdentifierIntLitLocalDecl(AIdentifierIntLitLocalDecl node)
    {
        defaultIn(node);
    }

    public void outAIdentifierIntLitLocalDecl(AIdentifierIntLitLocalDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierIntLitLocalDecl(AIdentifierIntLitLocalDecl node)
    {
        inAIdentifierIntLitLocalDecl(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLeftSbrace() != null)
        {
            node.getLeftSbrace().apply(this);
        }
        if(node.getRightSbrace() != null)
        {
            node.getRightSbrace().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAIdentifierIntLitLocalDecl(node);
    }

    public void inALocalDeclSimpleStmt(ALocalDeclSimpleStmt node)
    {
        defaultIn(node);
    }

    public void outALocalDeclSimpleStmt(ALocalDeclSimpleStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALocalDeclSimpleStmt(ALocalDeclSimpleStmt node)
    {
        inALocalDeclSimpleStmt(node);
        if(node.getLocalDecl() != null)
        {
            node.getLocalDecl().apply(this);
        }
        outALocalDeclSimpleStmt(node);
    }

    public void inAFieldAccessExprSimpleStmt(AFieldAccessExprSimpleStmt node)
    {
        defaultIn(node);
    }

    public void outAFieldAccessExprSimpleStmt(AFieldAccessExprSimpleStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFieldAccessExprSimpleStmt(AFieldAccessExprSimpleStmt node)
    {
        inAFieldAccessExprSimpleStmt(node);
        if(node.getFieldAccess() != null)
        {
            node.getFieldAccess().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAFieldAccessExprSimpleStmt(node);
    }

    public void inAMethodCallSimpleStmt(AMethodCallSimpleStmt node)
    {
        defaultIn(node);
    }

    public void outAMethodCallSimpleStmt(AMethodCallSimpleStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodCallSimpleStmt(AMethodCallSimpleStmt node)
    {
        inAMethodCallSimpleStmt(node);
        if(node.getMethodCall() != null)
        {
            node.getMethodCall().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAMethodCallSimpleStmt(node);
    }

    public void inAReturnSimpleStmt(AReturnSimpleStmt node)
    {
        defaultIn(node);
    }

    public void outAReturnSimpleStmt(AReturnSimpleStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnSimpleStmt(AReturnSimpleStmt node)
    {
        inAReturnSimpleStmt(node);
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAReturnSimpleStmt(node);
    }

    public void inAReturnExprSimpleStmt(AReturnExprSimpleStmt node)
    {
        defaultIn(node);
    }

    public void outAReturnExprSimpleStmt(AReturnExprSimpleStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnExprSimpleStmt(AReturnExprSimpleStmt node)
    {
        inAReturnExprSimpleStmt(node);
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAReturnExprSimpleStmt(node);
    }

    public void inABlockSimpleStmt(ABlockSimpleStmt node)
    {
        defaultIn(node);
    }

    public void outABlockSimpleStmt(ABlockSimpleStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockSimpleStmt(ABlockSimpleStmt node)
    {
        inABlockSimpleStmt(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        outABlockSimpleStmt(node);
    }

    public void inAWhileSimpleStmt(AWhileSimpleStmt node)
    {
        defaultIn(node);
    }

    public void outAWhileSimpleStmt(AWhileSimpleStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileSimpleStmt(AWhileSimpleStmt node)
    {
        inAWhileSimpleStmt(node);
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        outAWhileSimpleStmt(node);
    }

    public void inADoWhileSimpleStmt(ADoWhileSimpleStmt node)
    {
        defaultIn(node);
    }

    public void outADoWhileSimpleStmt(ADoWhileSimpleStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADoWhileSimpleStmt(ADoWhileSimpleStmt node)
    {
        inADoWhileSimpleStmt(node);
        if(node.getDo() != null)
        {
            node.getDo().apply(this);
        }
        if(node.getStmts() != null)
        {
            node.getStmts().apply(this);
        }
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outADoWhileSimpleStmt(node);
    }

    public void inASimpleStmt(ASimpleStmt node)
    {
        defaultIn(node);
    }

    public void outASimpleStmt(ASimpleStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleStmt(ASimpleStmt node)
    {
        inASimpleStmt(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outASimpleStmt(node);
    }

    public void inAFaIdFieldAccess(AFaIdFieldAccess node)
    {
        defaultIn(node);
    }

    public void outAFaIdFieldAccess(AFaIdFieldAccess node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFaIdFieldAccess(AFaIdFieldAccess node)
    {
        inAFaIdFieldAccess(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAFaIdFieldAccess(node);
    }

    public void inAFaIdDotIdFieldAccess(AFaIdDotIdFieldAccess node)
    {
        defaultIn(node);
    }

    public void outAFaIdDotIdFieldAccess(AFaIdDotIdFieldAccess node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFaIdDotIdFieldAccess(AFaIdDotIdFieldAccess node)
    {
        inAFaIdDotIdFieldAccess(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAFaIdDotIdFieldAccess(node);
    }

    public void inAArrayRefFieldAccess(AArrayRefFieldAccess node)
    {
        defaultIn(node);
    }

    public void outAArrayRefFieldAccess(AArrayRefFieldAccess node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayRefFieldAccess(AArrayRefFieldAccess node)
    {
        inAArrayRefFieldAccess(node);
        if(node.getArrayRef() != null)
        {
            node.getArrayRef().apply(this);
        }
        outAArrayRefFieldAccess(node);
    }

    public void inAArrayRefIdArrayRef(AArrayRefIdArrayRef node)
    {
        defaultIn(node);
    }

    public void outAArrayRefIdArrayRef(AArrayRefIdArrayRef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayRefIdArrayRef(AArrayRefIdArrayRef node)
    {
        inAArrayRefIdArrayRef(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLeftSbrace() != null)
        {
            node.getLeftSbrace().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getRightSbrace() != null)
        {
            node.getRightSbrace().apply(this);
        }
        outAArrayRefIdArrayRef(node);
    }

    public void inAArrayRefIddotidArrayRef(AArrayRefIddotidArrayRef node)
    {
        defaultIn(node);
    }

    public void outAArrayRefIddotidArrayRef(AArrayRefIddotidArrayRef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayRefIddotidArrayRef(AArrayRefIddotidArrayRef node)
    {
        inAArrayRefIddotidArrayRef(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeftSbrace() != null)
        {
            node.getLeftSbrace().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getRightSbrace() != null)
        {
            node.getRightSbrace().apply(this);
        }
        outAArrayRefIddotidArrayRef(node);
    }

    public void inAMethodCallIdMethodCall(AMethodCallIdMethodCall node)
    {
        defaultIn(node);
    }

    public void outAMethodCallIdMethodCall(AMethodCallIdMethodCall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodCallIdMethodCall(AMethodCallIdMethodCall node)
    {
        inAMethodCallIdMethodCall(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLeftBrace() != null)
        {
            node.getLeftBrace().apply(this);
        }
        if(node.getRightBrace() != null)
        {
            node.getRightBrace().apply(this);
        }
        outAMethodCallIdMethodCall(node);
    }

    public void inAMethodCallIdArgsMethodCall(AMethodCallIdArgsMethodCall node)
    {
        defaultIn(node);
    }

    public void outAMethodCallIdArgsMethodCall(AMethodCallIdArgsMethodCall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodCallIdArgsMethodCall(AMethodCallIdArgsMethodCall node)
    {
        inAMethodCallIdArgsMethodCall(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLeftBrace() != null)
        {
            node.getLeftBrace().apply(this);
        }
        if(node.getArgs() != null)
        {
            node.getArgs().apply(this);
        }
        if(node.getRightBrace() != null)
        {
            node.getRightBrace().apply(this);
        }
        outAMethodCallIdArgsMethodCall(node);
    }

    public void inAMethodCallIddotidMethodCall(AMethodCallIddotidMethodCall node)
    {
        defaultIn(node);
    }

    public void outAMethodCallIddotidMethodCall(AMethodCallIddotidMethodCall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodCallIddotidMethodCall(AMethodCallIddotidMethodCall node)
    {
        inAMethodCallIddotidMethodCall(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeftBrace() != null)
        {
            node.getLeftBrace().apply(this);
        }
        if(node.getRightBrace() != null)
        {
            node.getRightBrace().apply(this);
        }
        outAMethodCallIddotidMethodCall(node);
    }

    public void inAMethodCallIddoidArgsMethodCall(AMethodCallIddoidArgsMethodCall node)
    {
        defaultIn(node);
    }

    public void outAMethodCallIddoidArgsMethodCall(AMethodCallIddoidArgsMethodCall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodCallIddoidArgsMethodCall(AMethodCallIddoidArgsMethodCall node)
    {
        inAMethodCallIddoidArgsMethodCall(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeftBrace() != null)
        {
            node.getLeftBrace().apply(this);
        }
        if(node.getArgs() != null)
        {
            node.getArgs().apply(this);
        }
        if(node.getRightBrace() != null)
        {
            node.getRightBrace().apply(this);
        }
        outAMethodCallIddoidArgsMethodCall(node);
    }

    public void inAArgsExprArgs(AArgsExprArgs node)
    {
        defaultIn(node);
    }

    public void outAArgsExprArgs(AArgsExprArgs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArgsExprArgs(AArgsExprArgs node)
    {
        inAArgsExprArgs(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAArgsExprArgs(node);
    }

    public void inAArgsCommaExprArgs(AArgsCommaExprArgs node)
    {
        defaultIn(node);
    }

    public void outAArgsCommaExprArgs(AArgsCommaExprArgs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArgsCommaExprArgs(AArgsCommaExprArgs node)
    {
        inAArgsCommaExprArgs(node);
        if(node.getArgs() != null)
        {
            node.getArgs().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAArgsCommaExprArgs(node);
    }

    public void inAExprOrExpr(AExprOrExpr node)
    {
        defaultIn(node);
    }

    public void outAExprOrExpr(AExprOrExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprOrExpr(AExprOrExpr node)
    {
        inAExprOrExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        if(node.getE2() != null)
        {
            node.getE2().apply(this);
        }
        outAExprOrExpr(node);
    }

    public void inAExprAndExpr(AExprAndExpr node)
    {
        defaultIn(node);
    }

    public void outAExprAndExpr(AExprAndExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprAndExpr(AExprAndExpr node)
    {
        inAExprAndExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        if(node.getE2() != null)
        {
            node.getE2().apply(this);
        }
        outAExprAndExpr(node);
    }

    public void inAExprOnlyExpr(AExprOnlyExpr node)
    {
        defaultIn(node);
    }

    public void outAExprOnlyExpr(AExprOnlyExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprOnlyExpr(AExprOnlyExpr node)
    {
        inAExprOnlyExpr(node);
        if(node.getE2() != null)
        {
            node.getE2().apply(this);
        }
        outAExprOnlyExpr(node);
    }

    public void inAE3lte3E2(AE3lte3E2 node)
    {
        defaultIn(node);
    }

    public void outAE3lte3E2(AE3lte3E2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAE3lte3E2(AE3lte3E2 node)
    {
        inAE3lte3E2(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAE3lte3E2(node);
    }

    public void inAE3gte3E2(AE3gte3E2 node)
    {
        defaultIn(node);
    }

    public void outAE3gte3E2(AE3gte3E2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAE3gte3E2(AE3gte3E2 node)
    {
        inAE3gte3E2(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAE3gte3E2(node);
    }

    public void inAE3lteqe3E2(AE3lteqe3E2 node)
    {
        defaultIn(node);
    }

    public void outAE3lteqe3E2(AE3lteqe3E2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAE3lteqe3E2(AE3lteqe3E2 node)
    {
        inAE3lteqe3E2(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getLteq() != null)
        {
            node.getLteq().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAE3lteqe3E2(node);
    }

    public void inAE3gteqe3E2(AE3gteqe3E2 node)
    {
        defaultIn(node);
    }

    public void outAE3gteqe3E2(AE3gteqe3E2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAE3gteqe3E2(AE3gteqe3E2 node)
    {
        inAE3gteqe3E2(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getGteq() != null)
        {
            node.getGteq().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAE3gteqe3E2(node);
    }

    public void inAE3eqe3E2(AE3eqe3E2 node)
    {
        defaultIn(node);
    }

    public void outAE3eqe3E2(AE3eqe3E2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAE3eqe3E2(AE3eqe3E2 node)
    {
        inAE3eqe3E2(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAE3eqe3E2(node);
    }

    public void inAE3neqe3E2(AE3neqe3E2 node)
    {
        defaultIn(node);
    }

    public void outAE3neqe3E2(AE3neqe3E2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAE3neqe3E2(AE3neqe3E2 node)
    {
        inAE3neqe3E2(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getNeq() != null)
        {
            node.getNeq().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAE3neqe3E2(node);
    }

    public void inAE3onlyE2(AE3onlyE2 node)
    {
        defaultIn(node);
    }

    public void outAE3onlyE2(AE3onlyE2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAE3onlyE2(AE3onlyE2 node)
    {
        inAE3onlyE2(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAE3onlyE2(node);
    }

    public void inAE3pluse4E3(AE3pluse4E3 node)
    {
        defaultIn(node);
    }

    public void outAE3pluse4E3(AE3pluse4E3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAE3pluse4E3(AE3pluse4E3 node)
    {
        inAE3pluse4E3(node);
        if(node.getE3() != null)
        {
            node.getE3().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getE4() != null)
        {
            node.getE4().apply(this);
        }
        outAE3pluse4E3(node);
    }

    public void inAE3minuse4E3(AE3minuse4E3 node)
    {
        defaultIn(node);
    }

    public void outAE3minuse4E3(AE3minuse4E3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAE3minuse4E3(AE3minuse4E3 node)
    {
        inAE3minuse4E3(node);
        if(node.getE3() != null)
        {
            node.getE3().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getE4() != null)
        {
            node.getE4().apply(this);
        }
        outAE3minuse4E3(node);
    }

    public void inAE4onlyE3(AE4onlyE3 node)
    {
        defaultIn(node);
    }

    public void outAE4onlyE3(AE4onlyE3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAE4onlyE3(AE4onlyE3 node)
    {
        inAE4onlyE3(node);
        if(node.getE4() != null)
        {
            node.getE4().apply(this);
        }
        outAE4onlyE3(node);
    }

    public void inAE4mule5E4(AE4mule5E4 node)
    {
        defaultIn(node);
    }

    public void outAE4mule5E4(AE4mule5E4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAE4mule5E4(AE4mule5E4 node)
    {
        inAE4mule5E4(node);
        if(node.getE4() != null)
        {
            node.getE4().apply(this);
        }
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        if(node.getE5() != null)
        {
            node.getE5().apply(this);
        }
        outAE4mule5E4(node);
    }

    public void inAE4dive5E4(AE4dive5E4 node)
    {
        defaultIn(node);
    }

    public void outAE4dive5E4(AE4dive5E4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAE4dive5E4(AE4dive5E4 node)
    {
        inAE4dive5E4(node);
        if(node.getE4() != null)
        {
            node.getE4().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getE5() != null)
        {
            node.getE5().apply(this);
        }
        outAE4dive5E4(node);
    }

    public void inAE4mode5E4(AE4mode5E4 node)
    {
        defaultIn(node);
    }

    public void outAE4mode5E4(AE4mode5E4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAE4mode5E4(AE4mode5E4 node)
    {
        inAE4mode5E4(node);
        if(node.getE4() != null)
        {
            node.getE4().apply(this);
        }
        if(node.getMod() != null)
        {
            node.getMod().apply(this);
        }
        if(node.getE5() != null)
        {
            node.getE5().apply(this);
        }
        outAE4mode5E4(node);
    }

    public void inAE5onlyE4(AE5onlyE4 node)
    {
        defaultIn(node);
    }

    public void outAE5onlyE4(AE5onlyE4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAE5onlyE4(AE5onlyE4 node)
    {
        inAE5onlyE4(node);
        if(node.getE5() != null)
        {
            node.getE5().apply(this);
        }
        outAE5onlyE4(node);
    }

    public void inAE5complementE5(AE5complementE5 node)
    {
        defaultIn(node);
    }

    public void outAE5complementE5(AE5complementE5 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAE5complementE5(AE5complementE5 node)
    {
        inAE5complementE5(node);
        if(node.getComplement() != null)
        {
            node.getComplement().apply(this);
        }
        if(node.getE5() != null)
        {
            node.getE5().apply(this);
        }
        outAE5complementE5(node);
    }

    public void inAAdde5E5(AAdde5E5 node)
    {
        defaultIn(node);
    }

    public void outAAdde5E5(AAdde5E5 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAdde5E5(AAdde5E5 node)
    {
        inAAdde5E5(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getE5() != null)
        {
            node.getE5().apply(this);
        }
        outAAdde5E5(node);
    }

    public void inAMinuse5E5(AMinuse5E5 node)
    {
        defaultIn(node);
    }

    public void outAMinuse5E5(AMinuse5E5 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinuse5E5(AMinuse5E5 node)
    {
        inAMinuse5E5(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getE5() != null)
        {
            node.getE5().apply(this);
        }
        outAMinuse5E5(node);
    }

    public void inAPrimaryE5(APrimaryE5 node)
    {
        defaultIn(node);
    }

    public void outAPrimaryE5(APrimaryE5 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimaryE5(APrimaryE5 node)
    {
        inAPrimaryE5(node);
        if(node.getPrimary() != null)
        {
            node.getPrimary().apply(this);
        }
        outAPrimaryE5(node);
    }

    public void inAPrimaryFieldAccessPrimary(APrimaryFieldAccessPrimary node)
    {
        defaultIn(node);
    }

    public void outAPrimaryFieldAccessPrimary(APrimaryFieldAccessPrimary node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimaryFieldAccessPrimary(APrimaryFieldAccessPrimary node)
    {
        inAPrimaryFieldAccessPrimary(node);
        if(node.getFieldAccess() != null)
        {
            node.getFieldAccess().apply(this);
        }
        outAPrimaryFieldAccessPrimary(node);
    }

    public void inAPrimaryMethodCallPrimary(APrimaryMethodCallPrimary node)
    {
        defaultIn(node);
    }

    public void outAPrimaryMethodCallPrimary(APrimaryMethodCallPrimary node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimaryMethodCallPrimary(APrimaryMethodCallPrimary node)
    {
        inAPrimaryMethodCallPrimary(node);
        if(node.getMethodCall() != null)
        {
            node.getMethodCall().apply(this);
        }
        outAPrimaryMethodCallPrimary(node);
    }

    public void inAPrimaryIntLitPrimary(APrimaryIntLitPrimary node)
    {
        defaultIn(node);
    }

    public void outAPrimaryIntLitPrimary(APrimaryIntLitPrimary node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimaryIntLitPrimary(APrimaryIntLitPrimary node)
    {
        inAPrimaryIntLitPrimary(node);
        if(node.getIntegerLiteral() != null)
        {
            node.getIntegerLiteral().apply(this);
        }
        outAPrimaryIntLitPrimary(node);
    }

    public void inAPrimaryCharLitPrimary(APrimaryCharLitPrimary node)
    {
        defaultIn(node);
    }

    public void outAPrimaryCharLitPrimary(APrimaryCharLitPrimary node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimaryCharLitPrimary(APrimaryCharLitPrimary node)
    {
        inAPrimaryCharLitPrimary(node);
        if(node.getCharacterLiteral() != null)
        {
            node.getCharacterLiteral().apply(this);
        }
        outAPrimaryCharLitPrimary(node);
    }

    public void inAPrimaryStrLitPrimary(APrimaryStrLitPrimary node)
    {
        defaultIn(node);
    }

    public void outAPrimaryStrLitPrimary(APrimaryStrLitPrimary node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimaryStrLitPrimary(APrimaryStrLitPrimary node)
    {
        inAPrimaryStrLitPrimary(node);
        if(node.getStringLiteral() != null)
        {
            node.getStringLiteral().apply(this);
        }
        outAPrimaryStrLitPrimary(node);
    }

    public void inAPrimaryFloatLitPrimary(APrimaryFloatLitPrimary node)
    {
        defaultIn(node);
    }

    public void outAPrimaryFloatLitPrimary(APrimaryFloatLitPrimary node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimaryFloatLitPrimary(APrimaryFloatLitPrimary node)
    {
        inAPrimaryFloatLitPrimary(node);
        if(node.getFloatLiteral() != null)
        {
            node.getFloatLiteral().apply(this);
        }
        outAPrimaryFloatLitPrimary(node);
    }

    public void inAPrimaryTruePrimary(APrimaryTruePrimary node)
    {
        defaultIn(node);
    }

    public void outAPrimaryTruePrimary(APrimaryTruePrimary node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimaryTruePrimary(APrimaryTruePrimary node)
    {
        inAPrimaryTruePrimary(node);
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        outAPrimaryTruePrimary(node);
    }

    public void inAPrimaryFalsePrimary(APrimaryFalsePrimary node)
    {
        defaultIn(node);
    }

    public void outAPrimaryFalsePrimary(APrimaryFalsePrimary node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimaryFalsePrimary(APrimaryFalsePrimary node)
    {
        inAPrimaryFalsePrimary(node);
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        outAPrimaryFalsePrimary(node);
    }

    public void inAPrimary(APrimary node)
    {
        defaultIn(node);
    }

    public void outAPrimary(APrimary node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimary(APrimary node)
    {
        inAPrimary(node);
        if(node.getLeftBrace() != null)
        {
            node.getLeftBrace().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getRightBrace() != null)
        {
            node.getRightBrace().apply(this);
        }
        outAPrimary(node);
    }
}
