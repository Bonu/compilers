/* This file was generated by SableCC (http://www.sablecc.org/). */

package cplexer.analysis;

import java.util.*;
import cplexer.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseTWhiteSpace(TWhiteSpace node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSlcomment(TSlcomment node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMlcomment(TMlcomment node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDoccomment(TDoccomment node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKsemicolon(TKsemicolon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIdentifier(TIdentifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFloatLit(TFloatLit node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInteger(TInteger node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCharacter(TCharacter node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTStringLiteral(TStringLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDot(TDot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAssign(TAssign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLt(TLt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGt(TGt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComplement(TComplement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBitComplement(TBitComplement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTQuestion(TQuestion node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTColon(TColon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTHash(THash node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEq(TEq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLteq(TLteq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGteq(TGteq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNeq(TNeq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAnd(TAnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOr(TOr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPlusPlus(TPlusPlus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMinusMinus(TMinusMinus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTStar(TStar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBitAnd(TBitAnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBitOr(TBitOr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBitXor(TBitXor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMod(TMod node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLeftFbrace(TLeftFbrace node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRightFbrace(TRightFbrace node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSemicolon(TSemicolon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLeftSbrace(TLeftSbrace node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRightSbrace(TRightSbrace node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTArrow(TArrow node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLeftBrace(TLeftBrace node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRightBrace(TRightBrace node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDquote(TDquote node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTShiftLeft(TShiftLeft node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSignedShiftRight(TSignedShiftRight node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTUnsignedShiftRight(TUnsignedShiftRight node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPlusAssign(TPlusAssign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMinusAssign(TMinusAssign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTStarAssign(TStarAssign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDivAssign(TDivAssign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBitAndAssign(TBitAndAssign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBitOrAssign(TBitOrAssign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBitXorAssign(TBitXorAssign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTModAssign(TModAssign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTShiftLeftAssign(TShiftLeftAssign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSignedShiftRightAssign(TSignedShiftRightAssign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTUnsignedShiftRightAssign(TUnsignedShiftRightAssign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBool(TBool node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBreak(TBreak node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTChar(TChar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKconst(TKconst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTContinue(TContinue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDo(TDo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTElse(TElse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFalse(TFalse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFloat(TFloat node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInt(TInt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKClass(TKClass node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNew(TNew node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNull(TNull node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPrivate(TPrivate node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTProtected(TProtected node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPublic(TPublic node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTReturn(TReturn node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTStatic(TStatic node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTString(TString node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTStruct(TStruct node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTThis(TThis node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTrue(TTrue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTWhile(TWhile node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVoid(TVoid node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
